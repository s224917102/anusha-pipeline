apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  labels:
    app: product-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '8000'
    spec:
      initContainers:
      - name: wait-for-product-db
        image: postgres:15
        command: ['sh', '-c', 'until pg_isready -h product-db-service-w09-aks -U postgres; do echo "Waiting for product DB..."; sleep 5; done']
      containers:
      - name: product-service-container
        image: docker.io/s224917102/product_service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        env:
        - name: POSTGRES_HOST
          value: product-db-service-w09-aks
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: ecomm-config-w09-aks
              key: PRODUCTS_DB_NAME
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: ecomm-secrets-w09-aks
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ecomm-secrets-w09-aks
              key: POSTGRES_PASSWORD

        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 25
          periodSeconds: 5
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 50
          periodSeconds: 10
          failureThreshold: 5

---
apiVersion: v1
kind: Service
metadata:
  name: product-service
  labels:
    app: product-service
spec:
  selector:
    app: product-service
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: LoadBalancer