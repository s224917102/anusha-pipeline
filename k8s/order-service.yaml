apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  labels:
    app: order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8000"
    spec:
      initContainers:
      - name: wait-for-order-db
        image: postgres:15
        command: ['sh', '-c', 'until pg_isready -h order-db-service-w09-aks -U postgres; do echo "Waiting for order DB..."; sleep 5; done']

      - name: wait-for-product-service
        image: curlimages/curl:8.8.0
        command: ['sh', '-c', 'until curl -fs http://product-service:8000/health; do echo "Waiting for Product Service..."; sleep 5; done']

      containers:
      - name: order-service-container
        image: docker.io/s224917102/order_service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        env:
        - name: POSTGRES_HOST
          value: order-db-service-w09-aks
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: ecomm-config-w09-aks
              key: ORDERS_DB_NAME
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: ecomm-secrets-w09-aks
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ecomm-secrets-w09-aks
              key: POSTGRES_PASSWORD
        - name: PRODUCT_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: ecomm-config-w09-aks
              key: PRODUCT_SERVICE_URL

---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  labels:
    app: order-service
spec:
  selector:
    app: order-service
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8000
  type: LoadBalancer